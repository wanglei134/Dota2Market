/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.33
 * Generated at: 2016-04-18 04:45:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <base href=\"");
      out.print(basePath);
      out.write("\">\r\n");
      out.write("    \r\n");
      out.write("    <title>Dota2库存</title>\r\n");
      out.write("\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"expires\" content=\"0\">    \r\n");
      out.write("\t<meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\r\n");
      out.write("\t<meta http-equiv=\"description\" content=\"This is my page\">\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"dwr/engine.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"dwr/util.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"dwr/interface/GoodsService.js\"></script>\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\tul.imglist{ margin:0 auto; width:650px; overflow:hidden;background-color:#111;border-radius:5px;text-align:center;} \r\n");
      out.write("\tul.imglist li{ float:left; padding:1px 2px;} \r\n");
      out.write("\tul.imglist li img{ display:block; width:62px; height:62px} \r\n");
      out.write("\tul.imglist li span{ display:block; line-height:30px; } \r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\twindow.onload=function(){ \r\n");
      out.write("\t\tvar steamId=$(\"steamId\").value;\r\n");
      out.write("\t\tvar type=$(\"type\").value;\r\n");
      out.write("\t\tGoodsService.fetchData(steamId,type,fetchDataFinished); \r\n");
      out.write("\t}\r\n");
      out.write("\tfunction fetch(){\r\n");
      out.write("\t\tvar steamId=$(\"steamId\").value;\r\n");
      out.write("\t\tvar type=$(\"type\").value;\r\n");
      out.write("\t\tGoodsService.fetchData(steamId,type,fetchDataFinished); \r\n");
      out.write("\t}\r\n");
      out.write("\tfunction fetchDataFinished(data){\r\n");
      out.write("\t\tconsole.log(data);\r\n");
      out.write("\t\tif (!data && typeof(data)!=\"undefined\" && data!=0)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t    alert(\"没有数据!\");\r\n");
      out.write("\t\t    return;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar total=0;\r\n");
      out.write("\t\tvar ul=document.getElementById(\"imglist\");\r\n");
      out.write("\t\tif(ul){\r\n");
      out.write("\t\t\tdocument.getElementById(\"imglist\").remove();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfor(var i=0;i<data.length;i++){  \r\n");
      out.write("\t         addRow(data[i].iconBase64,data[i].name,data[i].price);   // 表格添加一行\r\n");
      out.write("\t         if(data[i].price){\r\n");
      out.write("\t\t         var price=data[i].price.replace(/[$]/, \"\").replace(/USD/,\"\").replace(/ /,\"\");\r\n");
      out.write("\t\t         total+=parseFloat(price);\r\n");
      out.write("\t         }\r\n");
      out.write("\t        }\r\n");
      out.write("\t\t$(\"totalInfo\").innerHTML=\"Total: $\"+total+\" (\"+data.length+\" items)\";\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction addRow(icon,name,price){        \r\n");
      out.write("\t     \t   \r\n");
      out.write("\t\t   var div=document.getElementById(\"myDiv\");\r\n");
      out.write("\t\t   var ul=document.getElementById(\"imglist\");\r\n");
      out.write("\t\t   if(!ul)\r\n");
      out.write("\t       ul=document.createElement(\"ul\"); \r\n");
      out.write("\t       ul.id=\"imglist\";\r\n");
      out.write("\t       ul.className =\"imglist\";\r\n");
      out.write("\t       var li= document.createElement(\"li\"); \r\n");
      out.write("\t       var img = document.createElement(\"img\"); \r\n");
      out.write("\t       img.style=\"vertical-align:middle;\";\r\n");
      out.write("\t       img.src=\"data:image/png;base64,\"+icon;\r\n");
      out.write("\t       img.title=name;\r\n");
      out.write("\t       var span=document.createElement(\"span\");\r\n");
      out.write("\t       span.style=\"color: #5BD;\";\r\n");
      out.write("\t       span.innerHTML=price;\r\n");
      out.write("\t       li.style=\"border:2px solid rgb(77, 116, 85);\";\r\n");
      out.write("\t       li.appendChild(img); \r\n");
      out.write("\t       li.appendChild(span);\r\n");
      out.write("           ul.appendChild(li);    \r\n");
      out.write("           div.appendChild(ul);\r\n");
      out.write("\t    }  \r\n");
      out.write("\t</script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  <br>\r\n");
      out.write("  <br>\r\n");
      out.write("    <center>\r\n");
      out.write("\t  Type:<select id=\"type\">\r\n");
      out.write("\t  \t<option value=\"730\">CS:GO</option>\r\n");
      out.write("\t  \t<option value=\"730\" selected=\"selected\">DOTA2</option>\r\n");
      out.write("\t  </select>\r\n");
      out.write("\tSteamId:<input type=\"text\" value=\"76561198070173809\" id=\"steamId\"/>\r\n");
      out.write("\t<input type=\"button\" value=\"fetch\" onclick=\"fetch()\"/>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<div id=\"totalInfo\">\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<div id=\"myDiv\" >\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<table width=\"50%\" id=\"mytable\" border=\"1\" bordercolor=\"whitesmoke\">    \r\n");
      out.write("    </table>  \r\n");
      out.write("\t</center>\r\n");
      out.write("  </body> \r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
